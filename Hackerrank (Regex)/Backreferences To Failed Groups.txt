# Backreferences To Failed Groups
Backreference to a capturing group that match nothing is different from backreference to a capturing group that did not participate in the match at all.


# Capturing group that matches nothing:
Regex pattern: (b?)o\1
Test string:o

> Here, the regex pattern is matched with the Test string
Reason:
Here, b? is optional and matches nothing.
Thus, (b?) is successfully matched and captures nothing.
"o" is matched with "o" and \1 successfully matches the "nothing" captured by the group.


# Capturing group that didn't participate in the match at all
Regex pattern: (b)?o\1
Test string: o

> Here, the regex pattern is not matched with the Test string
Reason:
In most regex flavors (excluding JavaScript), (b)?o\1 fails to match 'o'.
Here (b) fails to match at all.
Since the whole group is optiona, the regex engine does not proceed to match 'o'.
The regex engine now arrives at \1 which references a group that did not participate in the match attempt at all.
Thus, the backreference fails to match at all.


# Question
You have a test string S.
Your task is to write a regex which will match S, with following condition(s):
- S consists of 8 digits.
- S may have "-" separator such that string S gets divided in 4 parts, with each part having exactly two digits. (Eg. 12-34-56-78)

Valid S:
- 12345678
- 12-34-56-87

Invalid S:
1-234-56-78
12-45-7810


# Analysis
Here, we are basically required to match a string with 8 digits such that they are "either" separated by hyphens "-" in the groups of 2 digits or not separated by any hyphens at all.
So basically either \d{2}-\d{2}-\d{2}-\d{2}
Or \d{8}

For this we can use a group containing the hyphen "-" symbol as an optional character and then backreference it in every part that we can potentially have a hyphen.
So if the capture group matches a hyphen after the first 2 digits it will expect to have hyphen after the next 2 subsequent digits and so on.
But if the capture group matches nothing, then it will expect to have nothing as a separator between the "first 2 digits" and the "subsequent 2 characters".


# Solution
const Regex_Pattern = /^\d{2}(-?)\d{2}\1\d{2}\1\d{2}$/;
