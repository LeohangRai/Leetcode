Square matrix is given as input.
For JS, it will be a 2D array as:

[
    [1,2,3],
    [4,5,6],
    [9,8,9]
]

# Method to get the sum of the "left to right" diagonal
Loop through the elements of the main "parent" array.
For each of the child arrays, add the value of the element at the index equal to the index of the current child array from the parent array.

So, the first array will be [1,2,3], so it's index will be 0.
From this first array, we need the first element, so we get 0.

The second array will be [4,5,6], so it's index will be 1.
From this second array, we need the second element, so we get 1.


#Method to get the sum of the "right to left" diagonal
Loop through the elements of the main "Parent" array.
For each of the child arrays, add the value of the element at position (subArr.length - (indexOfSubArray + 1)).

So, the first array will be [1,2,3], so it's index will be 0.
From this array, we need the last element, i.e. 3, which is at index:
= subArr.length - (indexOfSubArray + 1)
= 3 - (0 + 1)
= 3 - 1 
= 2

The second array will be [4,5,6], so it's index will be 1.
From this array, we need the middle element, i.e. 5, which is at index:
= subArr.length - (indexOfSubArray + 1)
= 3 - (1 + 1)
= 3 - 2
= 1



# Pseudocode
function diagonalDifference(arr) {
    // Write your code here
    let leftDiagonal = 0;
    let rightDiagonal = 0;
    arr.forEach((subArr, i) => {
        leftDiagonal += subArr[i];
        rightDiagonal += subArr[subArr.length - (i + 1)];
    })
    return Math.abs(leftDiagonal - rightDiagonal);
}
