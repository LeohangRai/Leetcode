# Question
We define super digit of an integer  using the following rules:
Given an integer, we need to find the super digit of the integer.
If x has only  digit, then its super digit is x.
Otherwise, the super digit of x is equal to the super digit of the sum of the digits of x.

For example, the super digit of 9875 will be calculated as:
	super_digit(9875)   	9+8+7+5 = 29 
	super_digit(29) 	2 + 9 = 11
	super_digit(11)		1 + 1 = 2
	super_digit(2)		= 2  


    
Output Format:
int: the super digit of n repeated k times

Input Format
The first line contains two space separated integers, n and k.


Sample Input 0
148 3

Sample Output 0
3


Explanation 0

Here n=148 and k=3, so p=148148148.

super_digit(P) = super_digit(148148148) 
               = super_digit(1+4+8+1+4+8+1+4+8)
               = super_digit(39)
               = super_digit(3+9)
               = super_digit(12)
               = super_digit(1+2)
               = super_digit(3)
               = 3




# Solution Explained
Given input parameters are "n" and "k".
Here, "n" is the actual number in string format and "k" represents the times that we have to repeat "n".
So, the actual digit will be "n".repeat(k)

Now, for our recursive solution, the base case will be the case where the length of the digit will be 1.
We can check whether the length of the digit is 1 or not by typecasting it to "string" and then checking its length.


