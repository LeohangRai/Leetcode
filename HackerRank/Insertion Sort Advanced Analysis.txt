# Question
Insertion Sort is a simple sorting technique which was covered in previous challenges. Sometimes, arrays may be too large for us to wait around for insertion sort to finish. Is there some other way we can calculate the number of shifts an insertion sort performs when sorting an array?

If k[i] is the number of elements over which the ith element of the array has to shift, then the total number of shifts will be k[1] + k[2] + ... + k[n].

# Example
Given: 
arr = [4,3,2,1]

Array		Shifts
[4,3,2,1]	
[3,4,2,1]	  1
[2,3,4,1]	  2
[1,2,3,4]	  3

Total shifts = 1 + 2 + 3 = 6



function insertionSort(arr) {
    let shiftCount = 0;
    for(let i = 1; i < arr.length; i++) {
        let value = arr[i];
        let hole = i;
        while(hole > 0 && arr[hole-1] > value) {
            arr[hole] = arr[hole-1];
            hole -= 1;
            shiftCount += 1
        }
        arr[hole] = value;
    }
    return shiftCount;
}

