# Searching in a BST

1. Recursive Implementation:
The recursive implementation of search operation on a BST will have 2 base cases, which are listed as failure condition and success condition below.
The success base case is the case when the key is found in the BST.
The other base case is the case of failure where the pointer ends up pointing to NULL, by traversing from the root to leaf node of a BST.

# Function definition:
recursiveSearch(root, key){}

# Failure condition:
if(root == Null) {  return Null; }

# Success condition:
if(root.data == key) { return root; }

# Recursion conditions:
else if (key < root.data) {
	recursiveSearch(root.left, key);
}
else {
	recursiveSearch(root.right, key);
}


# Full Code:
function recursiveSearch(root, key) {
	if(root == Null) {
		return Null; 
	}
	if(key == root.data) {
		return root;
	} else if (key < root.data) {
		recursiveSearch(root.left, key);
	} else {
		recursiveSearch(root.right, key);
	}
}


# Tail Recursion:
Here, the recursive call is happening at the tail/bottom of the function definition, either in (key < pointer.data) condition or (key > pointer.data) condition, so this is a case of Tail recursion. 
If the last statement in a function is a recursive call, then it is known as Tail recursion. 
Generally, to convert a recursion into iteration, you may need a stack (not always). 
But in order to implement a Tail recursion in iterative way, we will not need any stack (always).
We can see this in the conversion of recursive search implementation of a BST into iterative implementation.


2. Iterative Implementation:
Run a while loop that runs up until the point where the pointer's value becomes NULL. The pointer pointing to NULL, signifies the absence of the search key in the BST.
The pointer ends up pointing to NULL, by traversing from the root to leaf node of a BST when the given key is not present on the BST.

function searchBST(root, key) {
	while(root != Null) {
		if(key == root.data) { 
			return root; 
		}
		else if (key < root.data) { 
			root = root.left;
		} else {
			root = root.right;
		}
	}
	return Null;  // after exiting the while loop, this is the case where the key is not present in the BST
} 


# Time Complexity
The search time on a BST depends upon the height of the Tree.
This means, the worst case for searching on a BST is when the data we are searching for is located at leaf node or not present at all. (not present is more time consuming ig)
Whereas, the best case is the one where the data we are searching for is located at the root node.

So the time complexity of Searching on a BST would be:
O(h)
where h --> height of the BST

But, we know that the height of a binary tree can be minimum logn and maximum n:
logn <= h <= n

In case of BST, it will be h = logn.
I dunno maybe because BSTs are complete trees or whatever.

So, the time complexity of performing search operation in a Binary Search Tree is:
O(logn)

